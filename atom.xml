<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lqy&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-06T08:54:46.163Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liu qianyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>发布自己的npm包，并同步到github</title>
    <link href="http://example.com/2023/03/06/npm/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E5%B9%B6%E5%B0%86%E5%AE%83%E5%90%8C%E6%AD%A5%E5%88%B0github,gitlab/"/>
    <id>http://example.com/2023/03/06/npm/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E5%B9%B6%E5%B0%86%E5%AE%83%E5%90%8C%E6%AD%A5%E5%88%B0github,gitlab/</id>
    <published>2023-03-06T07:46:10.524Z</published>
    <updated>2023-03-06T08:54:46.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发项目的过程中，我们需要用到<a href="https://github.com/minio/minio">minio</a>接口去实现前端与s3分布式存储服务器的直接交互，在vue2项目中一切正常，但后来我们决定进行项目版本升级，采用vue3+vite开发。但Minio的官方客户端使用时必须依赖node.js, <a href="https://github.com/vitejs/vite/discussions/3083">无法在vite项目中使用</a>。</p><p>在搜索解决方案时看到了<a href="https://www.npmjs.com/package/minio-js">minio-js</a>,它提供了一种解决思路，即在这个项目中把minio的使用打包为纯js,可以在浏览器中直接调用minio的客户端。经过测试，接口可用。但是它只提供上传文件接口，接口不够完善，不能完全解决我们项目的问题，因此我决定改写这个项目,提供一些通用接口,并发布自己的npm包，从而更好地实现项目需求。具体项目描述可参考：<a href="https://github.com/Liuqianyik/minio-vite-js">minio-vite-js</a></p><h2 id="发布步骤"><a href="#发布步骤" class="headerlink" title="发布步骤"></a>发布步骤</h2><h3 id="1-首先我们准备一个需要打包发布的项目"><a href="#1-首先我们准备一个需要打包发布的项目" class="headerlink" title="1. 首先我们准备一个需要打包发布的项目"></a>1. 首先我们准备一个需要打包发布的项目</h3><p>我的项目结构大致如下：</p><p><img src="/imgs/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E5%B9%B6%E5%B0%86%E5%AE%83%E5%90%8C%E6%AD%A5%E5%88%B0github,gitlab/image-20230306165431543-16780928777802.png" alt="image-20230306165431543"></p><h4 id="1-1-初始化git"><a href="#1-1-初始化git" class="headerlink" title="1.1 初始化git"></a>1.1 初始化git</h4><p><code>git init</code></p><h4 id="1-2-修改package-json文件"><a href="#1-2-修改package-json文件" class="headerlink" title="1.2 修改package.json文件"></a>1.2 修改package.json文件</h4><pre><code class="json">{  "name": "minio-vite-js", // npm包名称，不能与仓库中已有包重名  "version": "0.0.7", // 版本号，每次更新之前要改这个版本号  "description": "minioclient with vite", // npm包描述  "main": "dist/minio-js.js", // 入口文件路径，在你通过import或require引用该npm包时就是引入的该路径的文件  "scripts": {    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",    "build": "webpack"  },  "keywords": [    "minio", "vite", "vue3"  ],  "author": "liuqianyik",   "license": "ISC",  "devDependencies": {    "webpack": "^5.75.0",    "webpack-cli": "^5.0.1"  },  "dependencies": {    "minio": "^7.0.32",    "node-polyfill-webpack-plugin": "^2.0.1"  }}</code></pre><h4 id="1-3-编写可读性强的说明文档README-md"><a href="#1-3-编写可读性强的说明文档README-md" class="headerlink" title="1.3 编写可读性强的说明文档README.md"></a>1.3 编写可读性强的说明文档README.md</h4><p>讲清楚项目应用的问题场景，使用方法，具体接口等</p><h4 id="1-4-构建项目"><a href="#1-4-构建项目" class="headerlink" title="1.4 构建项目"></a>1.4 构建项目</h4><p><code>npm run build</code></p><h3 id="2-发布npm包"><a href="#2-发布npm包" class="headerlink" title="2. 发布npm包"></a>2. 发布npm包</h3><h4 id="2-1-npm注册登录"><a href="#2-1-npm注册登录" class="headerlink" title="2.1 npm注册登录"></a>2.1 npm注册登录</h4><ul><li><p>先去npm官网注册账号：<a href="https://www.npmjs.com/%EF%BC%8C%E6%88%96%E8%80%85%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%86%8C%EF%BC%9A%60npm">https://www.npmjs.com/，或者通过终端命令注册：`npm</a> adduser`</p></li><li><p>终端登录npm账号：<code>npm login</code></p></li></ul><h4 id="2-2-发布"><a href="#2-2-发布" class="headerlink" title="2.2 发布"></a>2.2 发布</h4><ul><li>因为很多人把npm源都切到了淘宝源，毕竟速度快，但是发布npm前需要先恢复到npm官方源上，否则发布失败，切换命令(如果已经是官方源可忽略)：</li></ul><pre><code>// 配置npm全局使用淘宝镜像源npm config set registry https://registry.npm.taobao.org// 配置npm全局恢复官方镜像源npm config set registry https://registry.npmjs.org</code></pre><ul><li>在npm包项目根目录运行命令：</li></ul><p><code>npm publish</code></p><p>运行完后，稍等片刻，在npm官网就可以搜索到发布的该npm包了。</p><h4 id="2-3-更新发布"><a href="#2-3-更新发布" class="headerlink" title="2.3 更新发布"></a>2.3 更新发布</h4><p>当你的项目有修改或更新，想要再次提交修改时：</p><ul><li>在package.json中修改版本号 </li><li>重新构建项目</li><li>再一次发布<code>npm publish</code></li></ul><h3 id="3-与github项目相关联"><a href="#3-与github项目相关联" class="headerlink" title="3. 与github项目相关联"></a>3. 与github项目相关联</h3><h4 id="3-1-在github上创建该项目，并将代码推送上去"><a href="#3-1-在github上创建该项目，并将代码推送上去" class="headerlink" title="3.1 在github上创建该项目，并将代码推送上去"></a>3.1 在github上创建该项目，并将代码推送上去</h4><h4 id="3-2-获取到github仓库地址，与npm仓库相关联"><a href="#3-2-获取到github仓库地址，与npm仓库相关联" class="headerlink" title="3.2 获取到github仓库地址，与npm仓库相关联"></a>3.2 获取到github仓库地址，与npm仓库相关联</h4><p>在package.json中配置</p><pre><code>  "repository": {    "type": "git",    "url": "git://github.com/Liuqianyik/minio-vite-js.git" //github仓库地址，把https改为git即可  },</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发项目的过程中，我们需要用到&lt;a href=&quot;https://github.com/minio/minio&quot;&gt;minio</summary>
      
    
    
    
    <category term="npm" scheme="http://example.com/categories/npm/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git pull --rebase与git pull的区别</title>
    <link href="http://example.com/2023/03/06/Git/git%20pull%20--rebase%E4%B8%8Egit%20pull%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2023/03/06/Git/git%20pull%20--rebase%E4%B8%8Egit%20pull%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-03-06T06:48:48.616Z</published>
    <updated>2023-03-06T07:35:55.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>多人协作，向同一远程分支提交修改，在push代码时可能报错</p><pre><code class="bash">$ git push origin master# 结果如下To github.com:hello/demo.git ! [rejected]        master -&gt; master (fetch first)error: failed to push some refs to 'git@github.com:hello/demo.git'hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details.</code></pre><p><strong>报错原因：</strong>远程分支有新的提交我们还没有同步到本地，因此无法推送。所以我们需要先<code>git pull</code>,再<code>git push origin master</code>.</p><p>这里在git pull时，我们就有两种选择,选择哪种取决于我们想要什么样的git提交树：</p><p><code>git push origin master </code> 或<code>git push --rebase origin master</code></p><h2 id="git-pull-–rebase与git-pull的本质区别"><a href="#git-pull-–rebase与git-pull的本质区别" class="headerlink" title="git pull –rebase与git pull的本质区别"></a>git pull –rebase与git pull的本质区别</h2><ol><li><code>git pull</code>是一个组合命令，它会分两步执行，首先拉取远端代码，然后更新本地仓库，指令执行上的区别在于：</li></ol><blockquote><p>git pull origin master =  git fetch + git merge Fetch_Head</p><p>git pull –rebase origin master =  git fetch + git rebase Fetch_Head</p></blockquote><ol start="2"><li>git merge和git rebase的区别</li></ol><p>merge 是合并的意思，rebase是复位基底的意思。</p><p>现在我们有这样的两个分支,test和master，提交如下：</p><pre><code class="bash">     D---E test    /A---B---C---F master</code></pre><p>在master执行<code>git merge test</code>然后会得到如下结果：</p><pre><code class="bash">     D--------E    /          \A---B---C---F---G    test , master</code></pre><p>在master执行<code>git rebase test</code>,然后得到如下结果：</p><pre><code class="text"> A---C---D---E---C `---F` test , master</code></pre><p>可以看到merge操作会生成一个新的节点，之前提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的操作。</p><p>通过上面可以看到，想要更好的提交树，使用rebase操作会更好一点，这样可以线性的看到每一次提交，并且没有增加提交节点。<br>在操作中。merge操作遇到冲突时候，当前merge不能继续下去。手动修改冲突内容后，add 修改，commit 就可以了<br>而rebase操作的话，会中断rebase，同时会提示去解决冲突。解决冲突后，将修改add后执行git rebase -continue继续操作，或者git rebase -skip忽略冲突。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;多人协作，向同一远程分支提交修改，在push代码时可能报错&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ gi</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3+VueRouter4+Keycloak配置问题</title>
    <link href="http://example.com/2023/02/22/Vue3.0/Vue3+VueRouter4+Keycloak%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/02/22/Vue3.0/Vue3+VueRouter4+Keycloak%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-02-22T07:58:36.566Z</published>
    <updated>2023-03-06T06:30:58.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>main.ts中keycloak onReady()回调函数在router之后执行，导致router中无法获取正确的用户登录状态</p><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>例1：访问未登陆首页，点击登录，进入登陆界面，登录成功之后会继续访问未登陆首页，此时应该自动判断用户已登录的状态并展示个人中心组件。<br>例2：在主机列表页，点击登出，登出完成之后，按keycloak的逻辑会继续回到主机列表页，但在未登录状态无权访问，按道理应该在路由守卫进行判断，并导航进入403无权访问界面，从而进一步回到未登陆首页。</p><h2 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h2><ol><li>vue2中官方有示例<br>可以在keyclaok onready之后再创建vue实例<pre><code class="js">// main.jsimport VueKeyCloak from '@dsb-norge/vue-keycloak-js'Vue.use(VueKeyCloak, {init: { onLoad: 'check-sso', checkLoginIframe: false},config: { url: window.VUE_APP_AUTH_URL, realm: window.VUE_APP_AUTH_REALM, clientId: window.VUE_APP_AUTH_CLIENT_ID,},onReady: kc =&gt; { kc.loadUserInfo().success((data)=&gt; {   data.id = data.sub   data.username = data.preferred_username   store.commit('auth/SET_CURRENT_USER', data) }) new Vue({   router,   store,   i18n,   beforeCreate() {     store.commit('initialiseStore')   },   render: h =&gt; h(App) }).$mount('#app')}})</code></pre></li><li>vue3<br>vue3中API发生了变化，不再是创建实例这个概念了<br>参考</li></ol><ul><li><a href="https://www.psimms.de/keycloak-integration-in-vuejs-3/">Keycloak Integration in Vuejs 3</a></li><li><a href="https://github.com/dsb-norge/vue-keycloak-js">dsb-norge/vue-keycloak-js</a></li><li><a href="https://github.com/dsb-norge/vue-keycloak-js/issues/152">$keycloak with vue 3 and vue-router 4</a><strong>解决方案</strong><br>```ts<br>import { createApp } from ‘vue’</li></ul><p>import App from ‘./App.vue’<br>import router from ‘./router’</p><p>import VueKeycloak from ‘@dsb-norge/vue-keycloak-js’<br>import type { VueKeycloakInstance } from ‘@dsb-norge/vue-keycloak-js/dist/types’<br>import type { KeycloakInstance } from “keycloak-js”</p><p>const app = createApp(App)</p><p>// 使用keycloak插件<br>app.use(VueKeycloak, {<br>  init: {<br>    onLoad: ‘check-sso’,<br>  },<br>  config: {<br>    url: import.meta.env.VITE_APP_AUTH_URL,<br>    clientId: import.meta.env.VITE_APP_AUTH_CLIENT_ID,<br>    realm: import.meta.env.VITE_APP_AUTH_REALM,<br>  },<br>  onReady: (keycloak: KeycloakInstance) =&gt; {<br>    console.log(‘Keycloak ready’, keycloak)<br>    const currentUser = currentUserStore()</p><pre><code>if(keycloak.authenticated) {  // 对keycloak中的用户信息做处理，存储到store之类的  ...}// 等keycloak onready之后再引入router并挂载app对象app.use(router, app)app.mount('#app')</code></pre><p>  }<br>})</p><p>// 把keycloak发布为一个全局变量，可以在各个组件中使用$keycloak直接调用<br>declare module ‘@vue/runtime-core’ {<br>  interface ComponentCustomProperties  {<br>    $keycloak: VueKeycloakInstance<br>  }<br>}</p><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;main.ts中keycloak onReady()回调函数在router之后执行，导致router中无法获取正确的用户登录</summary>
      
    
    
    
    <category term="Vue3.0" scheme="http://example.com/categories/Vue3-0/"/>
    
    
  </entry>
  
  <entry>
    <title>js动态拼接url</title>
    <link href="http://example.com/2023/02/16/JavaScript/js%20%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5url/"/>
    <id>http://example.com/2023/02/16/JavaScript/js%20%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5url/</id>
    <published>2023-02-16T02:50:08.582Z</published>
    <updated>2023-03-06T06:31:22.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>发起http请求的时候，中台API定义的route中会有需要我们自定义的参数，比如：</p><pre><code class="js">/users?page=${page}&amp;size=${size}&amp;q=${q}// or/users/:uid/collection</code></pre><h2 id="请求的url写法"><a href="#请求的url写法" class="headerlink" title="请求的url写法"></a>请求的url写法</h2><pre><code class="js">// 方法一（我之前用的，很不灵活，直接用加号连接字符串，不推荐）url = '/users?page=' + this.page + '&amp;q=' + this.qurl = '/users/' + this.uid + '/collection'// 方法二（推荐）url = `/users?page=${this.page}&amp;q=${this.q}`url = `/users/${this.uid}/collection`</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;发起http请求的时候，中台API定义的route中会有需要我们自定义的参数，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code clas</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3+Vite构建项目</title>
    <link href="http://example.com/2023/02/15/Vue3.0/vue3+vite/"/>
    <id>http://example.com/2023/02/15/Vue3.0/vue3+vite/</id>
    <published>2023-02-15T12:47:26.144Z</published>
    <updated>2023-03-06T06:30:52.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue是什么？"><a href="#1-Vue是什么？" class="headerlink" title="1 Vue是什么？"></a>1 Vue是什么？</h2><p>Vue 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。</p><p>参考：<br>Vue官网：<a href="https://cn.vuejs.org/guide/introduction.html#what-is-vue">简介 | Vue.js</a></p><h3 id="1-1-Vue-特点"><a href="#1-1-Vue-特点" class="headerlink" title="1.1 Vue 特点"></a>1.1 Vue 特点</h3><p>Declarative Rendering，声明式渲染，基于JavaScript状态输出期望的HTML<br>Reactivity，反应式，自动追踪JavaScript状态，如有更新自动更新DOM</p><h3 id="1-2-Vue2-x-Vue3-0"><a href="#1-2-Vue2-x-Vue3-0" class="headerlink" title="1.2 Vue2.x - Vue3.0"></a>1.2 Vue2.x - Vue3.0</h3><p>2020年9月18日，Vue.js发布3.0版本</p><h4 id="1-2-1-新特性"><a href="#1-2-1-新特性" class="headerlink" title="1.2.1 新特性"></a>1.2.1 新特性</h4><ul><li>Vue3设计了一套强大的组合式API（Composition-API）代替了Vue2中的Option-API，提高了复用性，我们可以更加优雅的组织我们的代码，函数，让相关功能的代码更加有序的组织在一起</li><li>Vue3中使用Proxy配合Reflect从而代替了Vue2中的Object.defineProperty()方法，实现数据的响应式（数据代理）</li><li>组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中,减少标签层级, 减小内存占用</li><li>增加了一些新的组件标签，例如<teleport> <suspense></suspense></teleport></li><li>提供了一种新的脚手架工具 Vite</li></ul><h2 id="2-工程构建"><a href="#2-工程构建" class="headerlink" title="2 工程构建"></a>2 工程构建</h2><h3 id="2-1-开发环境"><a href="#2-1-开发环境" class="headerlink" title="2.1 开发环境"></a>2.1 开发环境</h3><p>Sublime Text 4配置LSP支持TypeScript</p><ol><li>Install LSP, Vue Syntax Highlight and LSP-volar from Package Control.</li><li>重启 Sublime Text</li><li><a href="https://github.com/sublimelsp/LSP-volar">https://github.com/sublimelsp/LSP-volar</a></li></ol><p>配置LSP-volar：</p><ol><li>Ctrl+Shift+P 输入 LSP-volar Settings，打开配置界面</li><li>右侧面板（自定义参数）中增加配置，实现LSP-volar插件对js/ts文件语法提示<pre><code class="json">{"selector": "text.html.vue | source.ts | source.tsx | source.js | source.jsx"}</code></pre></li></ol><p>参考：<br><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html">Vue工具链</a></p><h3 id="2-2-使用vite构建"><a href="#2-2-使用vite构建" class="headerlink" title="2.2 使用vite构建"></a>2.2 使用vite构建</h3><p>参考：</p><ul><li><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">创建一个项目| Vue CLI</a></li><li><a href="https://cn.vitejs.dev/">ViteJS</a></li><li><a href="https://github.com/vuejs/create-vue">Create Vue</a></li><li><a href="https://vuejs.org/guide/quick-start.html">Vue 3 Quick Start</a></li><li><a href="https://lxchuan12.gitee.io/create-vue/">Vue 团队公开快如闪电的全新脚手架工具 create-vue</a></li></ul><pre><code class="bash">// 1. 构建项目npm init vue@3// 默认使用vite构建，选择TypeScript、Vue Router、Pinia、ESLint、Prettier// 2. 安装依赖npm install// 3. 部署开发测试服务器npm run dev</code></pre><h4 id="2-2-1-配置-eslint-prettier"><a href="#2-2-1-配置-eslint-prettier" class="headerlink" title="2.2.1 配置 eslint-prettier"></a>2.2.1 配置 eslint-prettier</h4><pre><code class="json">// .prettierrc.json{  "htmlWhitespaceSensitivity": "ignore",  "endOfLine": "auto",  "semi": false,  "singleQuote": true,  "useTabs": false,  "tabWidth": 2,  "bracketSpacing": true,  "bracketSameLine": true,  "singleAttributePerLine": false}</code></pre><p>参考：</p><ul><li><a href="https://prettier.io/docs/en/options.html">Prettier Options</a></li><li><a href="https://juejin.cn/post/7050127881371910152">ESlint与Prettier配置指南</a></li><li><a href="https://blog.csdn.net/qq_36800701/article/details/112545940">解决格式化插件Prettier，格式化操作后，结束标签＞跑到下一行的问题。</a></li></ul><h4 id="2-2-2-tsconfig-json"><a href="#2-2-2-tsconfig-json" class="headerlink" title="2.2.2 tsconfig.json"></a>2.2.2 tsconfig.json</h4><pre><code class="json">compilerOptions → "noImplicitAny": false</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Vue是什么？&quot;&gt;&lt;a href=&quot;#1-Vue是什么？&quot; class=&quot;headerlink&quot; title=&quot;1 Vue是什么？&quot;&gt;&lt;/a&gt;1 Vue是什么？&lt;/h2&gt;&lt;p&gt;Vue 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、</summary>
      
    
    
    
    <category term="Vue3.0" scheme="http://example.com/categories/Vue3-0/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue子组件调用父组件中的自定义方法</title>
    <link href="http://example.com/2022/08/13/Vue%E7%94%9F%E6%80%81/Vue%E5%AD%90%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/08/13/Vue%E7%94%9F%E6%80%81/Vue%E5%AD%90%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-13T09:33:41.798Z</published>
    <updated>2023-03-06T06:34:05.470Z</updated>
    
    <content type="html"><![CDATA[<p>在vue项目中，父子组件之间传参和互相调用方法是经常需要用到的，这里主要讨论子组件通过调用父组件的方法,主要有以下三种方式</p><h2 id="一、通过this-parent调用父组件的方法"><a href="#一、通过this-parent调用父组件的方法" class="headerlink" title="一、通过this.$parent调用父组件的方法"></a>一、通过this.$parent调用父组件的方法</h2><pre><code class="html">&lt;!-- 父组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;child&gt;&lt;/child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import child from '~/components/dam/child';export default {    components: { child },    methods: {        fatherMethod() {            console.log('测试');        }    }};&lt;/script&gt;</code></pre><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;button @click="childMethod()"&gt;点击&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        methods: {            childMethod() {                this.$parent.fatherMethod();            }        }    };&lt;/script&gt;</code></pre><p>但这种方法有弊端：<br>this.$parent指向的时子组件外第一层元素，当子组件在父组件中不是第一层嵌套关系时，就无法获取到负组件中的方法和数据<br>如以下情况就无法成功调用</p><pre><code class="html">&lt;!-- 父组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;child2&gt;&lt;/child2&gt;    &lt;div&gt;        &lt;div&gt;子组件&lt;/div&gt;        &lt;child&gt;&lt;/child&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import child from '~/components/dam/child';export default {    components: { child },    methods: {        fatherMethod() {            console.log('测试');        }    }};&lt;/script&gt;</code></pre><p>当我们无法用this.$parent访问父组件的时候可以用$emit事件来实现子父组件通信。</p><h2 id="二、子组件里用-emit向父组件触发一个事件，父组件监听这个事件"><a href="#二、子组件里用-emit向父组件触发一个事件，父组件监听这个事件" class="headerlink" title="二、子组件里用$emit向父组件触发一个事件，父组件监听这个事件"></a>二、子组件里用$emit向父组件触发一个事件，父组件监听这个事件</h2><p>这种方式比较普遍，使用较多</p><pre><code class="html">&lt;!-- 子组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;child @usefather="fatherMethod"&gt;&lt;/child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  import child from '~/components/dam/child';  export default {    components: {      child    },    methods: {      fatherMethod() {        console.log('测试');      }    }  };&lt;/script&gt;</code></pre><pre><code class="html">&lt;!-- 父组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;button @click="childMethod()"&gt;点击&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    methods: {      childMethod() {        // 触发父组件中由&lt;child @usefather="fatherMethod"&gt;定义调用的fatherMethod方法        this.$emit('usefather');       }    }  };&lt;/script&gt;</code></pre><h2 id="三、父组件中定义自定义属性，将该方法传递到子组件中，子组件中通过props接收，再进行调用，这里也可以进行传值"><a href="#三、父组件中定义自定义属性，将该方法传递到子组件中，子组件中通过props接收，再进行调用，这里也可以进行传值" class="headerlink" title="三、父组件中定义自定义属性，将该方法传递到子组件中，子组件中通过props接收，再进行调用，这里也可以进行传值"></a>三、父组件中定义自定义属性，将该方法传递到子组件中，子组件中通过props接收，再进行调用，这里也可以进行传值</h2><p>类似于父组件向子组件中传值，这种传递方法的方式将负组件中的方法传递给子组件，供子组件进行调用</p><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;child :fatherMethod="fatherMethod"&gt;&lt;/child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  import child from '~/components/dam/child';  export default {    components: {      child    },    methods: {      fatherMethod() {        console.log('测试');      }    }  };&lt;/script&gt;</code></pre><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;button @click="childMethod()"&gt;点击&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    props: {      fatherMethod: {        type: Function,        default: null      }    },    methods: {      childMethod() {        if (this.fatherMethod) {          this.fatherMethod();        }      }    }  };&lt;/script&gt;</code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol><li><p>第一种方法最简便，但有限制条件</p></li><li><p>第二种方法使用的最多，数据流向比较清晰，和非父子组件传值的this.$observer.$emit()&nbsp; this.$observer.$on()使用方式类似（this.$emit()可以传多个值，this.$observer.$emit()只能传一个值）</p></li><li><p>第三种方法定义自定义属性，这种一般用来传递属性的，不用来传方法（自定义事件一般用来传函数，自定义属性一般用来传属性）</p></li></ol><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ul><li><a href="https://blog.51cto.com/u_15301829/3070906">vue子组件调用父组件的方法</a></li><li><a href="https://blog.csdn.net/aSmallProgrammer/article/details/103712589">Vue 子组件中 this.$parent 无法调用父组件的自定义方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在vue项目中，父子组件之间传参和互相调用方法是经常需要用到的，这里主要讨论子组件通过调用父组件的方法,主要有以下三种方式&lt;/p&gt;
&lt;h2 id=&quot;一、通过this-parent调用父组件的方法&quot;&gt;&lt;a href=&quot;#一、通过this-parent调用父组件的方法&quot; cla</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-moment时间格式化</title>
    <link href="http://example.com/2022/08/13/Vue%E6%8F%92%E4%BB%B6/vue-moment%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://example.com/2022/08/13/Vue%E6%8F%92%E4%BB%B6/vue-moment%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2022-08-13T08:17:36.442Z</published>
    <updated>2023-03-06T06:32:15.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、参考资料"><a href="#一、参考资料" class="headerlink" title="一、参考资料"></a>一、参考资料</h2><ol><li><a href="https://momentjs.com/">momentjs官网</a></li><li><a href="http://momentjs.cn/docs/">momentjs官网中文版使用文档</a></li><li><a href="https://github.com/brockpetrie/vue-moment?ref=madewithvuejs.com">github：vue-moment</a></li></ol><h2 id="二、vue安装插件及配置"><a href="#二、vue安装插件及配置" class="headerlink" title="二、vue安装插件及配置"></a>二、vue安装插件及配置</h2><h3 id="1-通过npm安装"><a href="#1-通过npm安装" class="headerlink" title="1. 通过npm安装"></a>1. 通过npm安装</h3><pre><code class="bash">$ npm install vue-moment</code></pre><h3 id="2-在项目中引入并配置插件"><a href="#2-在项目中引入并配置插件" class="headerlink" title="2. 在项目中引入并配置插件"></a>2. 在项目中引入并配置插件</h3><pre><code class="js">// main.js全局引入import VueMoment from 'vue-moment'import moment from 'moment'// 设置本地时区moment.locale('zh-cn')Vue.use(VueMoment, {  moment})</code></pre><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>一般后端传来的时间以及我们直接用<code>new Date()。getTime()</code>获取到的都是类似<code>1656673259949</code>的的字符串，在前端页面上展示的时间想要符合预期格式就需要用到momentjs插件</p><h4 id="3-1-常见用法："><a href="#3-1-常见用法：" class="headerlink" title="3.1. 常见用法："></a>3.1. 常见用法：</h4><ol><li>星期，年月日时分秒<pre><code class="html">&lt;span&gt;{{ someDate | moment("YYYY") }}&lt;/span&gt;&lt;!-- e.g. "2010" --&gt;&lt;span&gt;{{ someDate | moment("dddd, hA") }}&lt;/span&gt;&lt;!-- e.g. "Sun, 3PM" --&gt;&lt;span&gt;{{ someDate | moment("dddd, MMMM Do YYYY, h:mm:ss a") }}&lt;/span&gt;&lt;!-- e.g. "Sunday, February 14th 2010, 3:25:50 pm" --&gt;</code></pre></li><li>计算时间差<pre><code class="html">&lt;!-- 计算somedate到当前时间的间隔，输出eg:一个月前 --&gt;&lt;span&gt;{{ someDate | moment("from", "now") }}&lt;/span&gt;&lt;!-- 不加“now”，效果一样，以下是上面一行的简写版 --&gt;&lt;span&gt;{{ someDate | moment("from") }}&lt;/span&gt;&lt;!-- 给出参考时间的写法如下，计算 --&gt;&lt;span&gt;{{ someDate | moment("from", 1656673259949) }}&lt;/span&gt;</code></pre></li><li><a href="https://github.com/brockpetrie/vue-moment?ref=madewithvuejs.com">更多用法</a>在github官方项目可以看到</li><li><a href="https://momentjs.com/docs/#/displaying/from/">自定义格式的规则</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、参考资料&quot;&gt;&lt;a href=&quot;#一、参考资料&quot; class=&quot;headerlink&quot; title=&quot;一、参考资料&quot;&gt;&lt;/a&gt;一、参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://momentjs.com/&quot;&gt;momentjs官网&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="Vue插件" scheme="http://example.com/categories/Vue%E6%8F%92%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中watch对象内属性的方法</title>
    <link href="http://example.com/2022/08/13/Vue%E7%94%9F%E6%80%81/Vue%E4%B8%ADwatch%E5%AF%B9%E8%B1%A1%E5%86%85%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/08/13/Vue%E7%94%9F%E6%80%81/Vue%E4%B8%ADwatch%E5%AF%B9%E8%B1%A1%E5%86%85%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-13T07:47:39.563Z</published>
    <updated>2023-03-06T06:32:56.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题提出"><a href="#一、问题提出" class="headerlink" title="一、问题提出"></a>一、问题提出</h2><p>vue提供了watch方法，用于监听实例内data数据的变化。通常写法是：</p><pre><code>data: {    count: 10，    blog:{        title:'my-blog',        categories:[]    }},watch: {    count: function (newval, oldVal) {        console.log(`new: %s, old: %s`, newVal, oldVal);    }}</code></pre><p>上述情况里<code>data</code>中的<code>count</code>属性可以直接监听<br>但是如果需要监听的数据是对象内的某一属性值的变化:  </p><ul><li>直接watch整个对象的时候<code>(eg:blog)</code>会发现无论何时<code>newval</code>和<code>oldVal</code>的值都是一样的，这是因为<code>blog</code>这个对象的指向并没有发生改变。–&gt;深度监测</li><li>直接watch对象的属性<code>(eg:blog.categories)</code>就会报错。–&gt;用字符串来表示对象的属性调用或使用<code>computed</code>计算属性做中间层</li></ul><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="1-深度监测"><a href="#1-深度监测" class="headerlink" title="1.深度监测"></a>1.深度监测</h3><p>watch blog里面的deep设为了true，这样的话，如果修改了这个blog中的任何一个属性，都会执行handler这个方法。不过这样会造成更多的性能开销，尤其是对象里面属性过多，结构嵌套过深的时候。而且有时候我们就只想关心这个对象中的某个特定属性，这个时候可以这样</p><pre><code class="js">data: {    blog:{        title:'my-blog',        categories:[]    }},watch: {    blog:{        handler(newVal,oldVal){            console.log(`new: ${newVal}, old: ${oldVal}`);        },        deep:true    }}</code></pre><h3 id="2-用字符串来表示对象的属性调用"><a href="#2-用字符串来表示对象的属性调用" class="headerlink" title="2.用字符串来表示对象的属性调用"></a>2.用字符串来表示对象的属性调用</h3><pre><code>data: {    blog:{        title:'my-blog',        categories:[]    }},watch: {    'blog.categories'(newVal, oldVal) {        console.log(`new:${newVal}, old:${oldVal}`);    }, }</code></pre><h3 id="3-使用computed计算属性做中间层"><a href="#3-使用computed计算属性做中间层" class="headerlink" title="3.使用computed计算属性做中间层"></a>3.使用computed计算属性做中间层</h3><pre><code class="js">data: {    blog:{        title:'my-blog',        categories:[]    }},computed: {    categories() {        return this.blog.categories;    }},watch: {    categories(newVal, oldVal) {        console.log(`new:${newVal}, old:${oldVal}`);    }, },</code></pre><h2 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h2><ol><li><a href="https://v2.cn.vuejs.org/v2/guide/computed.html">计算属性和侦听器</a></li><li><a href="https://segmentfault.com/a/1190000018080301">Vue中watch对象内属性的方法</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、问题提出&quot;&gt;&lt;a href=&quot;#一、问题提出&quot; class=&quot;headerlink&quot; title=&quot;一、问题提出&quot;&gt;&lt;/a&gt;一、问题提出&lt;/h2&gt;&lt;p&gt;vue提供了watch方法，用于监听实例内data数据的变化。通常写法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>防止按钮多次点击以及点击后不自动失焦问题</title>
    <link href="http://example.com/2022/08/13/JavaScript/%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BB%A5%E5%8F%8A%E7%82%B9%E5%87%BB%E5%90%8E%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%A4%B1%E7%84%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/08/13/JavaScript/%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BB%A5%E5%8F%8A%E7%82%B9%E5%87%BB%E5%90%8E%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%A4%B1%E7%84%A6%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-13T01:23:51.849Z</published>
    <updated>2023-03-06T06:37:35.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题需求"><a href="#问题需求" class="headerlink" title="问题需求"></a>问题需求</h2><ul><li>点击按钮，通过click事件发起网络请求</li><li>点击之后按钮进入disabled状态，防止在请求完成之前二次点击，二次发起相同请求</li><li>点击之后按钮中显示的内容变为【暂停中…】，提示用户正在进行请求，提升用户交互体验</li><li>请求完成之后，按钮自动失焦，恢复原有状态</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/05bbf9cf86de">elementui中el-button点击后不失去焦点(按钮颜色不变)的解决</a></li><li><a href="https://stackoverflow.com/questions/16715075/preventing-multiple-clicks-on-button">Preventing multiple clicks on button</a></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><pre><code class="html">&lt;!-- 点击该按钮，就会触发restart方法，向后端发起ajax请求 --&gt;&lt;button @click="restart" id="restart"&gt;    &lt;i class="bx bx-revision me-1"&gt;&lt;/i&gt; 重启&lt;/button&gt;</code></pre><p>参考文章中给出的解决方案是直接用点击事件发生的元素解决问题，即</p><pre><code class="js">restart(evt) {    let target = evt.target;    if(target.nodeName == "SPAN"){        target = evt.target.parentNode;    }    target.blur();}</code></pre><p>这里做了一步判断，也就是说，如果按钮中有多个子元素，点击按钮时点击到这些子元素所在的区域，我们就得一一做if判断，在去获取父级元素，也就是我们需要操作的button，这样比较麻烦<br>改进：直接用<code>document.getElementById</code>获取按钮元素</p><pre><code class="js">restart() {    // 根据元素id获取button元素    let evt = document.getElementById("restart")    // 将button原始子元素暂存，用于请求结束后恢复    let innerHTML = evt.innerHTML    // 获取button元素的子元素，并将内容变为‘暂停中..’（我加了一个spin的加载动画），给用户交互提示    evt.innerHTML = '&lt;span class="spinner-border spinner-border-sm me-1" role="status"&gt;&lt;/span&gt;正在重启...'    // 点击重启按钮之后将暂停按钮变为不可点击状态    evt.disabled = true    // 发起网络请求    this.$axios.post(this.GLOBAL.host+“后台接口地址”，this.$qs.stringify(data))        .then((data) =&gt; {            // 请求完成            if(data.code === 1) {                // 通知用户请求结果                this.$notify({ text: '重启成功!', type: 'success', group: 'app' })                        } else {                this.$notify({ text: '重启失败!', type: 'error', group: 'app' })            }            // 重启完成之后将重启按钮的内容恢复为原来的内容，            evt.innerHTML = innerHTML            // 取消disabled状态            evt.disabled = false            // 让按钮失焦            evt.blur();        })},</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题需求&quot;&gt;&lt;a href=&quot;#问题需求&quot; class=&quot;headerlink&quot; title=&quot;问题需求&quot;&gt;&lt;/a&gt;问题需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击按钮，通过click事件发起网络请求&lt;/li&gt;
&lt;li&gt;点击之后按钮进入disabled状态，防止在请求完成</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="http://example.com/2022/07/30/Vue%E7%94%9F%E6%80%81/Vue%20Router/"/>
    <id>http://example.com/2022/07/30/Vue%E7%94%9F%E6%80%81/Vue%20Router/</id>
    <published>2022-07-30T01:55:23.060Z</published>
    <updated>2023-03-06T06:32:44.612Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Vue.js，我们已经用组件组成了我们的应用。当加入 Vue Router 时，我们需要做的就是将我们的组件映射到路由上，让 Vue Router 知道在哪里渲染它们。</p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li>路由是指根据url的不同，展示不同的内容</li><li>router-link是跳转路由的标签，通过点击router-link标签，可以帮我们快速跳转到设置的路由下去</li><li>router-view负责展示当前路由对应的组件内容</li><li>/route/index.js文件下定义不同路由和其对应组件之间的关系<h3 id="最简实例"><a href="#最简实例" class="headerlink" title="最简实例"></a>最简实例</h3><pre><code class="html">&lt;div id="app"&gt;&lt;h1&gt;Hello App!&lt;/h1&gt;&lt;p&gt; &lt;!--使用 router-link 组件进行导航 --&gt; &lt;!--通过传递 `to` 来指定路由/链接 --&gt; &lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt; &lt;router-link to="/"&gt;Go to Home&lt;/router-link&gt; &lt;router-link to="/about"&gt;Go to About&lt;/router-link&gt;&lt;/p&gt;&lt;!-- 路由出口 --&gt;&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</code></pre></li><li>我们没有使用常规的 a 标签，而是使用一个自定义组件 router-link 来创建链接。这使得 <code>Vue Router</code> 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。</li><li><blockquote><p><code>router-view</code> 将显示与 url 对应的组件。你可以把它放在任何地方，以适应你的布局。<br>可以理解为是一个占位符，你点击一个routerlink，对应routerview的地方就展示路由对应的组件界面</p></blockquote></li></ol><h3 id="项目中配置Router的步骤"><a href="#项目中配置Router的步骤" class="headerlink" title="项目中配置Router的步骤"></a>项目中配置Router的步骤</h3><pre><code class="js">// 1. 定义路由组件.// 也可以从其他文件导入const Home = { template: '&lt;div&gt;Home&lt;/div&gt;' }const About = { template: '&lt;div&gt;About&lt;/div&gt;' }// 2. 定义一些路由// 每个路由都需要映射到一个组件。// 我们后面再讨论嵌套路由。const routes = [  { path: '/', component: Home },  { path: '/about', component: About },]// 3. 创建路由实例并传递 `routes` 配置// 你可以在这里输入更多的配置，但我们在这里// 暂时保持简单const router = VueRouter.createRouter({  // 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。  history: VueRouter.createWebHashHistory(),  routes, // `routes: routes` 的缩写})// 5. 创建并挂载根实例const app = Vue.createApp({})//确保 _use_ 路由实例使//整个应用支持路由。app.use(router)app.mount('#app')// 现在，应用已经启动了！</code></pre><p>  通过调用 app.use(router)，我们可以在任意组件中以 this.$router 的形式访问它，并且以 this.$route 的形式访问当前路由：</p><pre><code class="js">// Home.vueexport default {  computed: {    username() {      // 我们很快就会看到 `params` 是什么      return this.$route.params.username    },  },  methods: {    goToDashboard() {      if (isAuthenticated) {        this.$router.push('/dashboard')      } else {        this.$router.push('/login')      }    },  },}</code></pre><p>要在 setup 函数中访问路由，请调用 useRouter 或 useRoute 函数。</p><p>在整个文档中，我们会经常使用 router 实例，请记住，this.$router 与直接使用通过 createRouter 创建的 router 实例完全相同。我们使用 this.$router 的原因是，我们不想在每个需要操作路由的组件中都导入路由。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过 Vue.js，我们已经用组件组成了我们的应用。当加入 Vue Router 时，我们需要做的就是将我们的组件映射到路由上，让 Vue Router 知道在哪里渲染它们。&lt;/p&gt;
&lt;h3 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue项目目录中各文件的作用</title>
    <link href="http://example.com/2022/07/24/PsiAI%E9%A1%B9%E7%9B%AE/vue%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2022/07/24/PsiAI%E9%A1%B9%E7%9B%AE/vue%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2022-07-24T03:08:36.363Z</published>
    <updated>2023-03-06T06:42:45.278Z</updated>
    
    <content type="html"><![CDATA[<ol><li>node_modules: 用于存放我们项目的各种依赖，比如axios等，没有moudles文件，项目就没法运行，可以使用 npm install进行项目依赖的安装</li><li>public:用于存放静态文件</li><li>public/index.html:是一个模板文件，作用是生成项目的入口文件，webpack打包的js,css也会自动注入到该页面中。我们浏览器访问项目的时候就会默认打开生成好的index.html</li><li>src:我们存放各种vue文件的地方</li><li>src/assets:用于存放各种静态文件，如图片等</li><li>src/compnents：用于存放我们的公共组件，如 header、footer等</li><li>src/views：用于存放我们写好的各种页面，如login、main等</li><li>src/APP.VUE: 主vue模块 引入其他模块，app.vue是项目的主组件，所有页面都是在app.vue下切换的</li><li>src/main.js: 入口文件，主要作用是初始化vue实例，同时可以在此文件中引用某些组件库或者全局挂在一些变量</li><li>src/router.js: 路由文件，这个里边可以理解为各个页面的地址路径，用于我们访问，同时可以直接在里边编写路由守卫</li><li>src/store.js：主要用于项目里边的一些状态的保存，state中保存状态，mutations中写用于修改state中的状态，actions暂时没实践，不知道具体怎么使用</li><li>package.json: 模块基本信息项目开发所需要模块，版本，项目名称</li><li>package-lock.json: 是在 npm install时候生成一份文件，用以记录当前状态下实际安装的各个npm package的具体来源和版本号</li><li>babel.config.js: 是一个工具链，主要用于在当前和较旧的浏览器或环境中将ECMAScript 2015+代码转换为JavaScript的向后兼容版本</li><li>gitignore: git上传需要忽略的文件格式</li><li>postcss.config.js: postcss 是帮我们后处理css ，css已经编译完成了，在stylus-loader编译成css之后，在通过postcss优化css，通过一系列组件去优化，比如以下，通过autoprefixer 添加css前缀<br>vue.config.js: 保存vue配置的文件，可以用于设置代理,打包配置等</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;node_modules: 用于存放我们项目的各种依赖，比如axios等，没有moudles文件，项目就没法运行，可以使用 npm install进行项目依赖的安装&lt;/li&gt;
&lt;li&gt;public:用于存放静态文件&lt;/li&gt;
&lt;li&gt;public/index.h</summary>
      
    
    
    
    <category term="PsiAI项目" scheme="http://example.com/categories/PsiAI%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>在本机运行dvclab项目步骤</title>
    <link href="http://example.com/2022/07/23/PsiAI%E9%A1%B9%E7%9B%AE/%E5%9C%A8%E6%9C%AC%E6%9C%BA%E8%BF%90%E8%A1%8Cdvclab%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2022/07/23/PsiAI%E9%A1%B9%E7%9B%AE/%E5%9C%A8%E6%9C%AC%E6%9C%BA%E8%BF%90%E8%A1%8Cdvclab%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-07-23T08:10:38.568Z</published>
    <updated>2023-03-06T06:43:05.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰Git</a></p><h2 id="2-克隆项目到本地"><a href="#2-克隆项目到本地" class="headerlink" title="2. 克隆项目到本地"></a>2. 克隆项目到本地</h2><ul><li>在gitlab或者github找到想clone的项目地址，如<a href="https://gitlab.dvclab.com/frontend/DvcAI-fe.git">https://gitlab.dvclab.com/frontend/DvcAI-fe.git</a>  </li><li>到你想下载的目录下打开命令行<pre><code class="bash">git clone https://gitlab.dvclab.com/frontend/DvcAI-fe.git</code></pre><h2 id="3-下载依赖包-一开始项目是用yarn构建的"><a href="#3-下载依赖包-一开始项目是用yarn构建的" class="headerlink" title="3. 下载依赖包: 一开始项目是用yarn构建的"></a>3. 下载依赖包: 一开始项目是用yarn构建的</h2><pre><code class="bash">yarn install</code></pre><h2 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4. 运行项目"></a>4. 运行项目</h2><pre><code class="bash">npm run dev</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装git&quot;&gt;&lt;a href=&quot;#1-安装git&quot; class=&quot;headerlink&quot; title=&quot;1. 安装git&quot;&gt;&lt;/a&gt;1. 安装git&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/8960</summary>
      
    
    
    
    <category term="PsiAI项目" scheme="http://example.com/categories/PsiAI%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>sublime使用方法记录</title>
    <link href="http://example.com/2022/07/18/sublime%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/07/18/sublime%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</id>
    <published>2022-07-18T03:53:53.544Z</published>
    <updated>2023-03-06T06:36:55.459Z</updated>
    
    <content type="html"><![CDATA[<p>  之前一直用的是vscode，现在因为导师要求和项目需要，改用sublime，记录一下从零到一的使用过程，留下一些使用技巧供自己以后回顾</p><h2 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h2><p>直接去官网<a href="https://www.sublimetext.com/download_thanks?target=win-x64">sublime</a>下载，是免费的</p><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><ol><li>设置主题<br>preferences ==&gt; select theme ==&gt; 选择自己想要的主题即可</li><li>安装package control<br>菜单栏tools ==&gt; Install Package Control…</li><li>安装插件  <ul><li>打开package control快捷键：<code>Shift + Ctrl + P</code></li><li>在搜索框中输入install，选择第一项“Package Control: Install Package”,点击之后等一会会出现package control的搜索框</li><li>接下来就可以搜索需要的插件名进行下载了</li><li><strong>注意：</strong> 每次下载插件都需要重复2，3步</li></ul></li><li>Sublime Text 3偏好设置  <ul><li>设置 tab 为2个空格  <ul><li>Preferences =&gt; Setting =&gt; 在文件中如下添加两行代码设置<pre><code class="json">"tab_size": 2,"translate_tabs_to_spaces": true</code></pre></li></ul></li><li>设置Sublime Text备注颜色  <ul><li>通过Package Control: Install Package安装PackageResourceViewer  </li><li>Ctrl+Shift+P 搜索选择 PackageResourceViewer: OpenResource  </li><li>继续搜索选择 Color Scheme - Default  (可以选择你想要的color scheme)</li><li>选择Monokai.sublime-color-scheme（monokai是我选择的color scheme，自己要用哪个colrscheme就改哪个）, rules中添加：<pre><code class="json">{"name": "Comment","scope": "comment","foreground": "#888888"},{"name": "Comment Line","scope": "comment.line","foreground": "#00fa9f"},{"name": "Comment Block","scope": "comment.block","foreground": "#666666"},{"name": "Comment Block Document","scope": "comment.block.documentation","foreground": "#00fa9f","background": "#3f3f3f","font_style": "italic"},</code></pre></li></ul></li></ul></li></ol><h2 id="三、开发需要用到的插件"><a href="#三、开发需要用到的插件" class="headerlink" title="三、开发需要用到的插件"></a>三、开发需要用到的插件</h2><ol><li><a href="https://packagecontrol.io/packages/Vue%20Syntax%20Highlight">Vue Syntax Hightlight</a>：vue代码高亮</li><li><a href="https://packagecontrol.io/packages/SublimeLinter">Sublimelinter</a>：代码检查框架插件，支持各种语言的检查，但其本身并没有代码检查的功能</li><li><a href="https://packagecontrol.io/packages/SublimeLinter-eslint">SublimeLinter-eslint</a>：在SublimeLinter插件的基础上，需要添加该插件Sublime​Linter-eslint，实现对 ESLint 语言检查支持</li><li><a href="https://packagecontrol.io/packages/Sass">Sass</a>：实现Scss和Sass语法高亮</li><li><a href="">x</a>：高亮显示代码配色</li><li><a href="https://github.com/randy3k/Terminus">Terminus</a>：调出终端</li><li>终端快捷键配置：  <ul><li>选择SublimeText3 -&gt; Preference -&gt; Key Bindings打开快捷键配置文件</li><li>按如下方式配置快捷键配置文件：<pre><code class="json">// 选择ctrl+shift+T来进行Terminus终端的打开操作[ { "keys": ["ctrl+shift+t"], "command": "toggle_terminus_panel" }]</code></pre></li><li><strong>注意：</strong> 自定义的快捷键可能和默认设置有重合，这时可能会不生效，在不生效的时候可以检查一下，如果真的有重合就换一个快捷键</li></ul></li><li><a href="https://www.php.cn/tool/sublime/457675.html">markdown相关</a>  <ul><li><p>Markdown Preview</p></li><li><p>Markdown Editing</p></li><li><p>设置Markdown编辑高亮，打开Perferences &gt; Package Settings &gt; Markdown Preview &gt; Setting-User,输入以下代码，保存<br>```json<br>{ “font_size”: 13,    “ignored_packages”:</p><p> [        “Vintage”</p><p> ],</p></li></ul>   /*<pre><code>   Enable or not mathjax support.</code></pre>   */    “enable_mathjax”: true,   /*<pre><code>   Enable or not highlight.js support for syntax highlighting.</code></pre>   */    “enable_highlight”: true, }<pre><code>-  设置浏览器预览快捷键，打开Perferences &gt; Key Bindings，在右边输入以下代码，保存</code></pre>   {“keys”: [“Ctrl+m”], “command”: “markdown_preview”, “args”:{“target” : “browser”} }<br>   ```<ul><li>验证是否配置成功，新建后缀为.md的文档，用Sublime编辑，保存,然后按快捷键ctrl+m,在默认浏览器中显示预览结果</li></ul></li><li>SideBarEnhancements</li></ol><ul><li>SideBarEnhancements 是一款很实用的右键菜单增强插件，有以 diff形式显示未保存的修改、在文件管理器中显示该文件、复制文件路径、在侧边栏中定位该文件等功能，也有基础的诸如新建文件/目录，编辑，打开/运行，显示，在选择中/上级目录/项目中查找，剪切，复制，粘贴，重命名，删除，刷新等常见功能。</li></ul><h2 id="四、可能遇到的问题"><a href="#四、可能遇到的问题" class="headerlink" title="四、可能遇到的问题"></a>四、可能遇到的问题</h2><ol><li>packages contorl安装插件装不上<br>解决办法：<br>直接菜单栏Perferences    –&gt;Browse Packages，Package Control  拷贝到sublime 的packages目录下，重启后重新点击  菜单栏Perferences，可以正常安装插件。</li><li>全局搜索快捷键不生效<br>菜单栏find =&gt; find in files可以全局搜索，但快捷键<code>ctrl+shift+f</code>不生效</li></ol><ul><li>原因：输入法中的繁简切换快捷键冲突了</li><li>解决方法：在输入法的设置中把繁简切换快捷键取消掉</li></ul><h2 id="五、常用快捷键"><a href="#五、常用快捷键" class="headerlink" title="五、常用快捷键"></a>五、常用快捷键</h2><ul><li><code>ctrl+shift+~</code> 跳出终端</li><li><code>ait+shift+2</code>  分屏</li><li><code>ctrl+f</code> 在当前文件中查找</li><li>``</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  之前一直用的是vscode，现在因为导师要求和项目需要，改用sublime，记录一下从零到一的使用过程，留下一些使用技巧供自己以后回顾&lt;/p&gt;
&lt;h2 id=&quot;一、下载安装&quot;&gt;&lt;a href=&quot;#一、下载安装&quot; class=&quot;headerlink&quot; title=&quot;一、下</summary>
      
    
    
    
    <category term="软件使用" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="sublime" scheme="http://example.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>js,html,css注释方式</title>
    <link href="http://example.com/2022/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/js,html,css%E6%B3%A8%E9%87%8A%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/js,html,css%E6%B3%A8%E9%87%8A%E6%96%B9%E5%BC%8F/</id>
    <published>2022-07-13T10:43:28.050Z</published>
    <updated>2023-03-06T06:36:01.928Z</updated>
    
    <content type="html"><![CDATA[<p>为了是代码更规范，增加代码的可读性，我们在写代码的时候一定要注意注释的添加，那相应的注释格式也有所不同。</p><h2 id="一、js中的注释"><a href="#一、js中的注释" class="headerlink" title="一、js中的注释"></a>一、js中的注释</h2><p>分为三种：单行注释、多行注释、方法注释</p><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1. 单行注释"></a>1. 单行注释</h3><ul><li>最常见的”//“,在程序间随处可见,只能注释单行</li><li>比较重要，高亮颜色需要最醒目<pre><code class="js">// 这是一行注释，只能注释单行。// 另一行注释</code></pre><h3 id="2-多行注释multi-line-comment"><a href="#2-多行注释multi-line-comment" class="headerlink" title="2. 多行注释multi-line comment"></a>2. 多行注释multi-line comment</h3></li><li>多行注释以 /* 开始，以 */ 结尾</li><li>一般js文件开头，介绍作者，函数等信息</li><li>一般不太重要，高亮颜色设为不影响阅读代码的灰色即可<br>```js<br>/*<br>author:xxx<br>day:2008-08-10</li></ul><p>*/</p><pre><code>### 3. 方法注释function annotation- 在方法之前定义，描述这个函数的功能，参数，编写者等信息- 注释颜色醒目程度介于1，2之间```js/** * @name hash * @description Random hashing algorithm I found on Stack Overflow. * @param {string} str  * @param {boolean} asString  * @param {*} seed  *  * @returns {string} hash */function hash(str, asString, seed) {...}</code></pre><h2 id="二、html中的注释"><a href="#二、html中的注释" class="headerlink" title="二、html中的注释"></a>二、html中的注释</h2><pre><code class="html">&lt;!-- 这是一个注释，注释在浏览器中不会显示 --&gt;</code></pre><h2 id="三、css中的注释"><a href="#三、css中的注释" class="headerlink" title="三、css中的注释"></a>三、css中的注释</h2><ul><li>可以写在样式表中任意允许空格的位置。</li><li>可以写成一行，也可以写成多行。</li><li>/* <em>/ 风格的注释语法可以用作单行注释，也可以用作多行注释<br>```css<br>/</em> 下面的注释用于禁用特定的样式 */</li></ul><p>/*<br>span {<br>  color: blue;<br>  font-size: 1.5em;<br>}<br>*/</p><p>span {<br>  color: blue;<br>  /* font-size: 1.5em; */<br>}</p><p>```</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了是代码更规范，增加代码的可读性，我们在写代码的时候一定要注意注释的添加，那相应的注释格式也有所不同。&lt;/p&gt;
&lt;h2 id=&quot;一、js中的注释&quot;&gt;&lt;a href=&quot;#一、js中的注释&quot; class=&quot;headerlink&quot; title=&quot;一、js中的注释&quot;&gt;&lt;/a&gt;一、</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="注释" scheme="http://example.com/tags/%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>js回调函数用法</title>
    <link href="http://example.com/2022/07/11/JavaScript/js%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2022/07/11/JavaScript/js%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3/</id>
    <published>2022-07-11T14:50:45.191Z</published>
    <updated>2023-03-06T06:36:18.529Z</updated>
    
    <content type="html"><![CDATA[<p>记录我在开发过程中总遇到，但不太懂的小知识点</p><h2 id="一、回调函数概念"><a href="#一、回调函数概念" class="headerlink" title="一、回调函数概念"></a>一、回调函数概念</h2><p>参考：</p><ul><li><a href="https://dmitripavlutin.com/javascript-callback/">Everything About Callback Functions in JavaScript</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400">高阶函数-廖雪峰</a><br>其他网站关于回调函数概念的描述很详细，我就不再赘述了，这里主要记录一下，这两个参考网站给我的启发<br>廖雪峰在关于pytjon的高阶函数一文中说到：<blockquote><p>函数本身也可以赋值给变量，即：变量可以指向函数<br>函数名其实就是指向函数的变量<br>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数 </p></blockquote></li></ul><p>回到js中，这个高阶函数其实也就是我们说的以回调函数作为其参数之一的的高阶函数</p><blockquote><p>The callback function is supplied as an argument to a higher-order function that invokes (“calls back”) the callback function to perform an operation.  </p></blockquote><p>也就是说：回调函数就是作为一个实参传递给高阶函数，接下来高阶函数完全负责调用回调并为其提供正确的参数</p><h3 id="1-使用方法："><a href="#1-使用方法：" class="headerlink" title="1. 使用方法："></a>1. 使用方法：</h3><pre><code class="js">// 高阶函数higherOrder(param, callback) {    let a = param + 2    callback(a)}// 回调函数printdata(data) {    console.log(a)}// 用法: 普通参数正常传值，回调函数就传入函数名即可higherOrder(3, printData)// 输出5</code></pre><h2 id="二、遇到的问题"><a href="#二、遇到的问题" class="headerlink" title="二、遇到的问题"></a>二、遇到的问题</h2><h3 id="如何从外部获取回调函数的返回值？"><a href="#如何从外部获取回调函数的返回值？" class="headerlink" title="如何从外部获取回调函数的返回值？"></a>如何从外部获取回调函数的返回值？</h3><p>在写项目的过程中我陷入了这样的一个问题中</p><pre><code class="js">// 在公用js文件中定义的函数，通过一个外部服务的接口可以获得datagetFile(a) {    client.getObj(a, function(data) {        ....        console.log(data)    })}// 具体使用的vue组件中，我需要把data传递到这个组件中并用来赋值或渲染数据到页面中useData(data) {    this.name = data.name}</code></pre><p>最开始我的做法是，在getFile中return data，但发现useData中根本获取不到返回值</p><pre><code class="js">// 在公用js文件中定义的函数，通过一个外部服务的接口可以获得datagetFile(a) {    return client.getObj(a, function(data) {        ....        return data    })}// 具体使用的vue组件中，我需要把data传递到这个组件中并用来赋值或渲染数据到页面中useData(data) {    this.name = data.name}// 具体用法let data = getFile(a) // 这里打印出来发现是undefineduseData(data)</code></pre><p>后来查了很多资料发现，我们不能在外部获取回调函数的返回值，但我们可以把想要对回调函数中数据做的操作当成一个回调函数传递进去<br>解决方法如下：</p><pre><code class="js">// 在公用js文件中定义的函数，通过一个外部服务的接口可以获得datagetFile(a, callback) {    return client.getObj(a, function(data) {        ....        return data    })}// 具体使用的vue组件中，我需要把data传递到这个组件中并用来赋值或渲染数据到页面中useData(data) {    this.name = data.name}// 具体用法getFile(a, useData)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录我在开发过程中总遇到，但不太懂的小知识点&lt;/p&gt;
&lt;h2 id=&quot;一、回调函数概念&quot;&gt;&lt;a href=&quot;#一、回调函数概念&quot; class=&quot;headerlink&quot; title=&quot;一、回调函数概念&quot;&gt;&lt;/a&gt;一、回调函数概念&lt;/h2&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>一些前端小知识点</title>
    <link href="http://example.com/2022/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9%EF%BC%8C%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2022/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9%EF%BC%8C%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-07-10T11:20:23.261Z</published>
    <updated>2023-03-06T06:42:10.488Z</updated>
    
    <content type="html"><![CDATA[<p>记录我在开发过程中总遇到，但不太懂的小知识点</p><h2 id="一、常见英语单词"><a href="#一、常见英语单词" class="headerlink" title="一、常见英语单词"></a>一、常见英语单词</h2><ul><li>instance 实例</li><li>context 语境，上下文</li><li>property 属性</li><li>Actual Argument 实际参数</li><li>Formal Parameter 形式参数（Argument 和 Parameter 两个词在很多文献中均翻译为参数）</li><li>higher-order function <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328655674400">高阶函数：函数名本身就是一个指向函数的变量</a> </li><li>invoke 调用</li><li>align 对齐</li><li>assembly 部件</li><li>plugin 插件</li><li>annotation 注解，注释，批注（多行，针对方法，程序，可以添加一些参数@name..）</li><li>comment 评论，单行注释</li><li>amulate 模仿</li><li>portal 入口，门户，一个基于web的应用程序。它主要提供个性化、单点登录、不同来源的内容整合以及存放信息系统的表示层</li><li>configuration 配置</li><li>deprecated 已弃用</li></ul><h2 id="二、vue相关"><a href="#二、vue相关" class="headerlink" title="二、vue相关"></a>二、vue相关</h2><ol><li><p>vue.use()是vue使用插件的固定语句</p></li><li><p>vue中<code>data</code>是会返回一个对象的函数，<code>methods</code> 选项是一个包含所有方法的对象,其他生命周期钩子也都是会被调用的函数</p><pre><code class="js">data() {   return {      data1:'',      data2:''   }},methods: {   function1() {      ...   },   function2() {   },   ...},created() {   ...}</code></pre></li></ol><h2 id="三、css相关"><a href="#三、css相关" class="headerlink" title="三、css相关"></a>三、css相关</h2><ol><li>bootstrap中常用的一些class<ul><li>fs-1 ~ fs-7 字号从大到小</li><li>fw-bold 字体加粗</li><li>mt、mb、ms、me分别控制上下左右的margin</li><li>rounded 控制边框弧度</li><li>gap-2 控制子组件的间隔</li><li>bg-white控制背景颜色</li><li>align-middle 定义在子标签上，让子标签纵向居中（在css中middle是说纵向居中，center是横向）</li></ul></li></ol><h2 id="四、js相关"><a href="#四、js相关" class="headerlink" title="四、js相关"></a>四、js相关</h2><h4 id="1-没有异常回调函数的时候可以用try-catch"><a href="#1-没有异常回调函数的时候可以用try-catch" class="headerlink" title="1. 没有异常回调函数的时候可以用try-catch"></a>1. 没有异常回调函数的时候可以用try-catch</h4><h4 id="2-分号问题"><a href="#2-分号问题" class="headerlink" title="2. 分号问题"></a>2. 分号问题</h4><ul><li>一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。</li><li>加与不加完全取决于个人意愿，不会影响程序的运行。</li><li>分号的添加是可选的，“可以加分号但是大家都不加” 的语言就有：Go, Scala, Ruby, Python, Swift, Groovy…</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录我在开发过程中总遇到，但不太懂的小知识点&lt;/p&gt;
&lt;h2 id=&quot;一、常见英语单词&quot;&gt;&lt;a href=&quot;#一、常见英语单词&quot; class=&quot;headerlink&quot; title=&quot;一、常见英语单词&quot;&gt;&lt;/a&gt;一、常见英语单词&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;instance 实</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-i18n插件用法</title>
    <link href="http://example.com/2022/07/10/Vue%E6%8F%92%E4%BB%B6/vue-i18n%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/07/10/Vue%E6%8F%92%E4%BB%B6/vue-i18n%E7%94%A8%E6%B3%95/</id>
    <published>2022-07-10T08:06:21.329Z</published>
    <updated>2023-03-06T06:32:10.124Z</updated>
    
    <content type="html"><![CDATA[<p>vue-i18n是一个vue插件，可以让vue项目实现多语言，国际化。参考：</p><ul><li><a href="https://kazupon.github.io/vue-i18n/started.html">vue-i18n官方文档</a></li><li><a href="https://segmentfault.com/a/1190000015008808">segmentfault: 如何让一个vue项目支持多语言</a><h2 id="一、引入vue-i18n插件"><a href="#一、引入vue-i18n插件" class="headerlink" title="一、引入vue-i18n插件"></a>一、引入vue-i18n插件</h2>```js<br>import Vue from ‘vue’<br>import VueI18n from ‘vue-i18n’</li></ul><p>// 通过全局方法使用插件<br>Vue.use(VueI18n)</p><pre><code>## 二、vue-i18n的最简单的使用模板分为以下4个部分：- message字典对象- 创建vue-i18n实例- 创建vue实例时将i18n作为option传递进去- 在vue组件中使用i18n   - 在组件的template中，调用$t()方法   - 在组件的script中，调用this.$i18n.t()方法    ```js    /*    ** JAVASCRIPT    */    // 定义一个包含多语言的对象字典    const messages = {    en: {        message: {        hello: 'hello world'        }    },    ja: {        message: {        hello: 'こんにちは、世界'        }    }    }    // 创建 VueI18n 实例 with options    const i18n = new VueI18n({    locale: 'ja', // set locale 默认使用日语    messages, // set locale messages 多语言字典    })    // 在实例化vue时，将i18n当作一个option传进去，之后就可以在vue组件中使用i18n了    new Vue({ i18n }).$mount('#app')    /*    ** HTML    */    // 在组件中使用i18n插件    &lt;div id="app"&gt;    &lt;p&gt;{{ $t("message.hello") }}&lt;/p&gt;    &lt;/div&gt;    // 输出为日语    &lt;div id="#app"&gt;    &lt;p&gt;こんにちは、世界&lt;/p&gt;    &lt;/div&gt;    ```## 三、在项目中使用i18n  上节的messages是一个包含了多语言的的对象，它就像我们的字典。既然是字典，我希望它只有一本。所以我只会new VueI18n()一次，并将实例化得到的i18n对象作为唯一的字典。  新建一个locales文件夹，存放所有跟多语言相关的代码。目前包含三个文件：- index.js : 统一设置locales文件夹下的语言包- en.json : 【英语】json形式的语言包，为了对照方便，我们必须保证语言包的内容是一一对应的- zh.json : 【中文】```js// index.js import Vue from 'vue'import VueI18n from 'vue-i18n'Vue.use(VueI18n)const DEFAULT_LANG = 'zh'const LOCALE_KEY = 'localeLanguage'// 配置多语言字典对象const locales = {  zh: require('./zh.json'),  en: require('./en.json'),}// 创建i18n实例对象（配置默认语言和字典对象）const i18n = new VueI18n({  locale: DEFAULT_LANG,  messages: locales,})// setup方法可以用来切换语种// 将当前语种存到 localStorage中，保存用户的使用习惯// 给body添加语种相关的class，因为不同语言可能导致排版出现差异，我们需要适配// 将当前语种存到Vue的全局配置中，以便未来可能的使用。export const setup = lang =&gt; {  if (lang === undefined) {    lang = window.localStorage.getItem(LOCALE_KEY)    if (locales[lang] === undefined) {      lang = DEFAULT_LANG    }  }  window.localStorage.setItem(LOCALE_KEY, lang)  Object.keys(locales).forEach(lang =&gt; {    document.body.classList.remove(`lang-${lang}`)  })  document.body.classList.add(`lang-${lang}`)  document.body.setAttribute('lang', lang)  Vue.config.lang = lang  i18n.locale = lang}setup()export default i18n</code></pre><p>最后在main.js中引入这个index.js即可</p><pre><code class="js">import Vue from 'vue'...import i18n from '@crm/locales'...new Vue({  i18n,  router,  store,  render: h =&gt; h(App),}).$mount('#app')</code></pre><h2 id="四、-可能遇到的问题"><a href="#四、-可能遇到的问题" class="headerlink" title="四、 可能遇到的问题"></a>四、 可能遇到的问题</h2><h3 id="1-问题一：vue实例外的js代码中的文本怎么替换？"><a href="#1-问题一：vue实例外的js代码中的文本怎么替换？" class="headerlink" title="1. 问题一：vue实例外的js代码中的文本怎么替换？"></a>1. 问题一：vue实例外的js代码中的文本怎么替换？</h3><p>前面说到，vue实例中我们可以使用this.$i18n.t，这里的this是vue的实例。那项目中很多js代码在vue的实例之外，我们要怎么办？</p><p>最简单的解决方法是这样的，我们的locales/index.js这个文件已经export了i18n这个对象，那我们只需要在每次要使用的时候手动将i18n导入进来就可以了。</p><pre><code class="js">&lt;script&gt;import i18n from '@crm/locales'//const test = "测试数据"const test = i18n.t('message.test')&lt;/script&gt;</code></pre><p>可是这样一来，我们之后做诸如上面的文本替换时，就得小心翼翼的区别是否在vue实例中。如果是，我们用this.$i18n.t，否则先import然后用i18n.t。这显然增加了复杂性！</p><p>为了解决这个问题，只直接的解决办法就是将i18n挂到window下，变成全局变量。我们就不必再Import进来，同时只使用统一方法:i18n.t。</p><p>我们在main.js中添加这行代码:</p><pre><code class="js">import Vue from 'vue'import App from './app.vue'import store from './store'import router from './router'...import i18n from '@crm/locales'...window.i18n = i18nnew Vue({  i18n,  router,  store,  render: h =&gt; h(App),}).$mount('#app')</code></pre><p>然后我们兴高采烈的将组件中的import i18n全去掉，并将this.$i18n.t改为i18n.t。然后项目跑起来就报错了：i18n is not defined。</p><p>问题出在哪里？显示是组件调用i18n的时候，i18n还没有挂载到window上，所以是执行顺序出了问题。我们先来看一下下面代码的执行顺序：</p><pre><code class="js">//假设webpack的入口文件是```main.js``` //main.jsimport moduleA from 'moduleA'console.log(1) import moduleB from 'moduleB'console.log(2) //moduleA.jsconsole.log(3) //moduleB.jsconsole.log(4)//最终在浏览器中打印出的数字顺序是: 3412</code></pre><p>为什么会这样呢？跟ES6 module的机制有关系。import命令具有提升效果，会提升到整个模块的头部，首先执行。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。</p><p>这样我们就找出之前报错的原因了，我们先import了App, router这些视图，然后Import的i18n并挂载到window。所以组件的script中的代码会最先执行，而此时i18n并未开始。所以我们首先将window.i18n = i18n移到locales/index中，然后调整main.js中import的顺序:</p><pre><code class="js">//locales/index...setup()window.i18n = i18nexport default i18n</code></pre><pre><code class="js">//main.jsimport Vue from 'vue'import i18n from '@crm/locales'import App from './app.vue'import store from './store'import router from './router'...</code></pre><h3 id="2-假如存在很多个new-Vue-怎么办？"><a href="#2-假如存在很多个new-Vue-怎么办？" class="headerlink" title="2. 假如存在很多个new Vue()怎么办？"></a>2. 假如存在很多个new Vue()怎么办？</h3><p>前面我们在main.js的new Vue({i18n, …})中将i18n作为option放了进去，但很快我发现这个项目并只有一个Vue的实例。全局搜索发现一共有70多个。</p><p>项目中很的诸如弹窗之类的组件，都是直接自己实例化一个Vue然后自己$mount()到DOM中。这些组件在实例化的过程中并没有混入i18n选项，所以他们的template上自然找不到$t()方法。</p><p>怎么办？难道给每一个new Vue()都手动添加i18n选项吗？肯定不行，首先我们要给添加70多次，其次如果未来又有人写了新的new Vue()忘了添加Ii8n，那又回导致报错。所以我们要想一个万全的法子。</p><p>官方文档里找不到解决办法，看来我们得hack一下了。首先我们来查vue-i18n的源码，找到$t()方法是怎么工作的。</p><p>全局搜索$t，找到定义它的地方：</p><pre><code class="js">  Object.defineProperty(Vue.prototype, '$t', {    get: function get () {      var this$1 = this;      return function (key) {        var values = [], len = arguments.length - 1;        while ( len-- &gt; 0 ) values[ len ] = arguments[ len + 1 ];        var i18n = this$1.$i18n;        return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this$1 ].concat( values ))      }    }  });</code></pre><p>可以看到$t挂载在Vue.prototype上，每当我们在实例中调用$t时，其实我们是在调用this.$i18n对象上的_t方法。现在问题变成，实例上的$i18n是什么是时候定义的。</p><p>全局搜索$i18n，我们找到了前面提到过的每个插件必须提供的install方法：</p><pre><code class="js">function install (_Vue) {  Vue = _Vue;    ...  Object.defineProperty(Vue.prototype, '$i18n', {    get: function get () { return this._i18n }  });  extend(Vue);  Vue.mixin(mixin);  Vue.directive('t', { bind: bind, update: update });  Vue.component(component.name, component);  // use object-based merge strategy  var strats = Vue.config.optionMergeStrategies;  strats.i18n = strats.methods;}</code></pre><p>可以看到$i18n一开始就被定义在了Vue.prototype上，每次调用的时候其实我们是在调用this._i18n，所以现在问题变成实例的_i18n在哪里。同时可以看到在Install中我们还混入了mixin, directive, component，这些在上面都有提过它的作用。</p><pre><code class="js">var mixin = {  beforeCreate: function beforeCreate () {    var options = this.$options;    options.i18n = options.i18n || (options.__i18n ? {} : null);    if (options.i18n) {      if (options.i18n instanceof VueI18n) {        ...        this._i18n = options.i18n;</code></pre><p>我们在mixin中找到了this._i18n的来源，前面提到mixin会被注入到组件中。在每个组件创建前，我们将this.$options的i18n给了this._i18n。</p><p>这个this.$options是什么？它的使用方式是Vue.mixin(mixin)，所以我们看一下vue的文档:全局混入</p><pre><code class="js">// 为自定义的选项 'myOption' 注入一个处理器。Vue.mixin({  created: function () {    var myOption = this.$options.myOption    if (myOption) {      console.log(myOption)    }  }})new Vue({  myOption: 'hello!'})// =&gt; "hello!"</code></pre><p>所以this.$options就是我们new Vue时提供的选项对象。</p><p>所以问题的根源就是除了main.js中的new Vue外，其余70多个new Vue我们没有混入i18n这个选项。怎样才可以让每次new Vue时自动将i18n混入选项呢？看上去我们只能修改Vue的源码了。</p><pre><code class="js">function Vue (options) {  if (process.env.NODE_ENV !== 'production' &amp;&amp;    !(this instanceof Vue)  ) {    warn('Vue is a constructor and should be called with the `new` keyword');  }  this._init(options);}</code></pre><p>可以看到每次Vue实例化时，会调用_init方法，这个方法从哪里来呢？</p><pre><code class="js">function initMixin (Vue) {  Vue.prototype._init = function (options) {    ...在Vue.prototype上，所以我们只需要修改Vue.prototype就好了。//locales/indexconst init = Vue.prototype._initVue.prototype._init = function(options) {  init.call(this, {    i18n,    ...options,  })}</code></pre><p>这样我们在任何时候new Vue()就自动添加了i18n选项，问题解决！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue-i18n是一个vue插件，可以让vue项目实现多语言，国际化。参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kazupon.github.io/vue-i18n/started.html&quot;&gt;vue-i18n官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="Vue插件" scheme="http://example.com/categories/Vue%E6%8F%92%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>vue生命周期的概念及用法</title>
    <link href="http://example.com/2022/07/04/Vue%E7%94%9F%E6%80%81/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/07/04/Vue%E7%94%9F%E6%80%81/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-07-04T14:23:13.580Z</published>
    <updated>2023-03-06T06:33:00.523Z</updated>
    
    <content type="html"><![CDATA[<p>vue的生命周期在做项目的过程中经常需要用到，在这里做简要记录,参考:</p><ul><li><a href="https://juejin.cn/post/6874855535234170887">vue生命周期详解</a></li><li><a href="https://bbs.huaweicloud.com/blogs/278913">一文带你弄懂Vue八大生命周期钩子函数</a></li><li><a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html">生命周期钩子</a></li></ul><h2 id="一、vue生命周期概述"><a href="#一、vue生命周期概述" class="headerlink" title="一、vue生命周期概述"></a>一、vue生命周期概述</h2><ul><li>我们把一个对象从生成（new）到被销毁（destory）的过程，称为生命周期。</li><li>vue的生命周期就是每个Vue实例在被创建时都要经过一系列的初始化过程：创建实例，装载模板，渲染模板等。Vue为生命周期中的每个状态都设置了钩子函数(监听函数) 。</li><li>每当Vue实例处于不同的生命周期时，对应的钩子函数就会被触发调用。我们可以根据自己的需要在这些钩子函数中加入自己的代码。</li></ul><h2 id="二、四个阶段，八个生命周期函数"><a href="#二、四个阶段，八个生命周期函数" class="headerlink" title="二、四个阶段，八个生命周期函数"></a>二、四个阶段，八个生命周期函数</h2><h3 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="1. 创建阶段"></a>1. 创建阶段</h3><p>这个阶段 vue组件开始初始化，vue开始观察数据，这个阶段有 beforeCreate 和 created 两个生命周期钩子函数。<br><strong>1.1 beforeCreate阶段</strong><br>在实例初始化（即new Vue()）之后、进行数据侦听和事件/侦听器的配置之前同步调用。此时 data、methods、computed以及watch上的数据和方法还未初始化，都不能被访问。<br>应用：我们可以在这个周期去初始化store，将localstorage中的数据复制到store中，参考<a href="https://www.mikestreety.co.uk/blog/vue-js-using-localstorage-with-the-vuex-store/">Vue: Using localStorage with Vuex store</a><br><strong>1.2 created</strong><br>在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。<br>可以做什么：</p><ul><li>data 和 methods 都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作。</li><li>无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</li><li>异步数据的请求适合在 created 的钩子中使用，例如数据初始化。<pre><code>// 这里created中getElementById会出错，因为视图中的html并没有渲染出来，所以此时如果直接去操作html的dom节点，一定找不到相关的元素// 而在mounted中，由于此时html已经渲染出来了，所以可以直接操作dom节点。created:function(){this.name="唐浩益"this.age = "12"this.city ="杭州"var x = document.getElementById("name")//第一个命令台错误console.log(x.innerHTML);},mounted:function(){var x = document.getElementById("name")//第二个命令台输出的结果console.log(x.innerHTML);}</code></pre><h3 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="2. 挂载阶段"></a>2. 挂载阶段</h3></li></ul><p><strong>2.1 beforeMount</strong><br>这个阶段完成了模板的编译，但是还没挂载到页面上。<br>要挂载的dom对象编译好了，但是页面的DOM树还没挂上去，这个阶段页面还没能显示出来。<br><strong>2.2 mounted</strong><br>这个阶段，模板编译好了，也挂载到页面中了，页面也可以显示了。<br>这里就可以使用document.getElementById去操作挂载好的dom元素了</p><blockquote><p>在实例挂载完成后被调用，这时候传递给 app.mount 的元素已经被新创建的 vm.$el 替换了。如果根实例被挂载到了一个文档内的元素上，当 mounted 被调用时， vm.$el 也会在文档内。 注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等待整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick：</p></blockquote><pre><code>mounted() {  this.$nextTick(function () {    // 仅在整个视图都被渲染之后才会运行的代码  })}</code></pre><p>该钩子在服务器端渲染期间不被调用。</p><h3 id="3-运行阶段"><a href="#3-运行阶段" class="headerlink" title="3. 运行阶段"></a>3. 运行阶段</h3><p><strong>3.1 beforeUpdate</strong></p><ul><li>data中的数据已经更改</li><li>准备挂载的dom中的数据也已更改</li><li>页面已挂载的dom还未更改<blockquote><p>在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。<br>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务器端进行。</p></blockquote></li></ul><p><strong>3.2 updated</strong></p><ul><li>页面已挂载的dom也更新了</li><li>我们应该避免在这个钩子函数中去更改状态，因为刚更改结束<blockquote><p>updated 不会保证所有的子组件也都被重新渲染完毕。如果你希望等待整个视图都渲染完毕，可以在 updated 内部使用 vm.$nextTick：</p></blockquote><pre><code class="js">updated() {this.$nextTick(function () {  // 仅在整个视图都被重新渲染完毕之后才会运行的代码})}</code></pre></li><li>用法，目前我自己还没有用到，百度发现了一个博主在做的即时聊天项目，打开当前会话加载完消息后需要自动滚动到窗口最底部，这里用updated就很合适<br>参考<a href="https://blog.csdn.net/weixin_44041976/article/details/107584572">vue updated生命周期的使用场景，可以做什么</a><h3 id="4-销毁阶段"><a href="#4-销毁阶段" class="headerlink" title="4. 销毁阶段"></a>4. 销毁阶段</h3></li></ul><p><strong>4.1 beforeDestroy(vue3中定义为beforeUnmount)</strong></p><ul><li>beforeDestroy阶段处于vue实例被销毁之前，当然，这个阶段vue实例还能用.我们可以在这时进行善后收尾工作，比如清除计时器。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul><p><strong>4.2 destroyed(vue3:unmounted)</strong></p><ul><li>卸载组件实例后调用。调用此钩子时，只剩下了dom空壳,组件已被拆解，数据绑定被卸除,组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</li><li>该钩子在服务器端渲染期间不被调用<blockquote><p>在大多数场景中你不应该调用这个方法。最好使用 v-if 和 v-for 指令以数据驱动的方式控制子组件的生命周期。</p></blockquote><h2 id="三、生命周期示意图"><a href="#三、生命周期示意图" class="headerlink" title="三、生命周期示意图"></a>三、生命周期示意图</h2><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期示意图"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue的生命周期在做项目的过程中经常需要用到，在这里做简要记录,参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/6874855535234170887&quot;&gt;vue生命周期详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue首次赋值不触发watch</title>
    <link href="http://example.com/2022/06/08/Vue%E7%94%9F%E6%80%81/vue%20watch%E9%A6%96%E6%AC%A1%E8%B5%8B%E5%80%BC%E5%B0%B1%E8%A7%A6%E5%8F%91/"/>
    <id>http://example.com/2022/06/08/Vue%E7%94%9F%E6%80%81/vue%20watch%E9%A6%96%E6%AC%A1%E8%B5%8B%E5%80%BC%E5%B0%B1%E8%A7%A6%E5%8F%91/</id>
    <published>2022-06-08T06:54:22.800Z</published>
    <updated>2023-03-06T06:32:52.928Z</updated>
    
    <content type="html"><![CDATA[<p>通过watch监听的数据，当字段被第一次赋值时是不会执行监听函数的。只有值再次发生改变才会执行监听。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>参考：<a href="https://blog.csdn.net/Liu_yunzhao/article/details/95395427">vue首次赋值不触发watch及watch和computed的区别</a><br>在选项参数中指定 immediate: true 将立即以表达式的当前值触发回调<br>也就是说immediate值为true，则首次赋值时就执行handler函数，immediate值为false，则首次赋值时就不执行handler函数</p><pre><code class="js"> watch: {     name: {         handler(newValue, oldValue) {},         immediate: true,     },     age: {         handler(newValue, oldValue) {},         immediate: true,     }, }</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过watch监听的数据，当字段被第一次赋值时是不会执行监听函数的。只有值再次发生改变才会执行监听。&lt;/p&gt;
&lt;h3 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h3&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vuex Getter 用法归纳(结合module)</title>
    <link href="http://example.com/2022/06/08/Vuex/vuex-getter%E7%94%A8%E6%B3%95%E5%BD%92%E7%BA%B3/"/>
    <id>http://example.com/2022/06/08/Vuex/vuex-getter%E7%94%A8%E6%B3%95%E5%BD%92%E7%BA%B3/</id>
    <published>2022-06-08T00:44:30.025Z</published>
    <updated>2023-03-06T06:30:23.627Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="https://vuex.vuejs.org/zh/guide/getters.html">Vuex Getter</a></p><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p>getter可以理解为store中的计算属性，当我们要在多个组件中用到state中的派生状态时，比如：</p><pre><code class="js">computed: {  doneTodosCount () {    return this.$store.state.todos.filter(todo =&gt; todo.done).length  }}</code></pre><p>像这样在多个函数中复制这个函数是不太现实的，因此我们可以将这样的函数写在vuex-getter中，每次在组件中直接调用getter即可</p><h3 id="二、getter写法"><a href="#二、getter写法" class="headerlink" title="二、getter写法"></a>二、getter写法</h3><ol><li>通过属性访问，作为 Vue 的响应式系统的一部分缓存其中<ol><li>Getter 接受 state 作为其第一个参数：  <pre><code class="js">const store = createStore({state: { todos: [ { id: 1, text: '...', done: true }, { id: 2, text: '...', done: false } ]},getters: { doneTodos (state) { return state.todos.filter(todo =&gt; todo.done) }}})</code></pre></li><li>Getter 也可以接受其他 getter 作为第二个参数：<pre><code class="js">getters: {// ...doneTodosCount (state, getters) { return getters.doneTodos.length}}</code></pre></li></ol></li><li>通过方法访问，可以通过让 getter 返回一个函数，来实现给 getter 传参。在你 store 里的数组进行查询时非常有用。getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。<pre><code class="js">getters: {// ...getTodoById: (state) =&gt; (id) =&gt; { return state.todos.find(todo =&gt; todo.id === id)}}</code></pre><h3 id="三、getter调用时写法"><a href="#三、getter调用时写法" class="headerlink" title="三、getter调用时写法"></a>三、getter调用时写法</h3></li><li>Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值：<pre><code class="js">store.getters.doneTodos // -&gt; [{ id: 1, text: '...', done: true }]</code></pre></li><li>通过方法访问时需要传参，每次都会区进行调用，而不会缓存结果<pre><code class="js">store.getters.getTodoById(2) // -&gt; { id: 2, text: '...', done: false }</code></pre></li><li>与module结合<br>对于有命名空间的模块中的getter的访问方法如下：<pre><code class="js">modules: {moduleA: { namespaced: true, getters: {   getterName: (state) =&gt; (param1, param2, ..) =&gt; {     ...   }, },}}$store.getters['moduleA/getterName'](param1,param2)</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;a href=&quot;https://vuex.vuejs.org/zh/guide/getters.html&quot;&gt;Vuex Getter&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Vuex" scheme="http://example.com/categories/Vuex/"/>
    
    
  </entry>
  
</feed>
